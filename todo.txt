# X	set up project:
	# X	add boilerplate files
	# X	set up repository 
	# X	publish to Github along the way
	# X	create a gh-pages branch
	# X	make a post-commit hook to overwrite gh-pages with master

@ X	system:
	# X	write init function for Crafty
	# X	set-up a loading and a main scene with appropriate functioning
	# X	set-up global mouse events and states extension to Crafty
	# X	massive bug, components (at least move > tick) is sharing states across entities
		-	Lesson learned. If you're going to use objects for internal storage for components, CLONE THEM IN INIT FIRST!
	# X	dynamically pad the document to provide desirable-length scrolling.
	? 	Apparently `this.required("components")` is a thing. See for yourself and use it.

@ X	player:
	# X	set up player entity with default components
	# X	add animated sprite, too
	# X	write custom components for movement:
		# X	a component that stores movement by units, a discrete beginning position, and a discrete end position, and a state for movement animation: move
		# X	extend that component to do the actual movement animation and also set states for movement, runs every frame
		# X	write a function to initiate directional movement so that angular movement is not possible
		# X	add an event for when movement is possible
		# X	make component out of test mouse-movement: ctrl_mouse
		# X	write a component that decides which direction the player has moved from scrolling: ctrl_scroll
	# X	wrap player entity in a nice closure
	# X	implement collisions:
		# X	add collision component and a smaller-than-unit hitbox
		# X	make collision with solid tiles reset movement
	# X	death:
		# X	intercept collision with active traps
		# X	place skull on map
		# X	let player freely pan the map to see how much he has explored
		# X	display pop-up on top saying "You have died! You collected X of Y gold. Try again?" which will reload map if clicked.
	# X	victory:
		# X	implement victory when all gold is collected
		# X	show message and be done with it
		
@ X	map:
	# X	design format to store map data
	# X	set-up map-tiles assemblage
	# X	make a test map
	# X	make assemblage that creates cell entities from data
	# X	make sure z-values are correct
	@ X	staging:
		# X	rescale the stage based on map size
		# X	add necessary margins to canvas automatically
	@ X	visibility:
		# X	hide all tiles upon generation
		# X	implement eye component that reveals hidden tiles by proximity
	@ X	switches:
		# X	write switch and switchable components
		# X	change map-drawing assemblage to new syntax where any values between 10 and 20 are switches, and the unit digit is its channel
	@ X	secret wall passages
		If trying to remove a sprite, do it hard! 
	@ X	offset for player and initial scroll
	@ X	gold!
	@ X	write assemblages for off door and traps
	# X	redo components and assemblages:
		# X	new rock tile and assemblage
		# X	trap has no off state
		# X	all switches and doors have hard-wired channels, and only three
		# X	gold, traps, doors, and switches do not create a floor underneath anymore

@ X artwork:
	# X	copy over Oryx' spritesheets
	# X	edit as necessary
	# X	split animation statically
	# X	minimize sprite "sheet"
	# X	fine a more menacing tile for the traps
	# X	add a natural rock tile for cave walls
	# X	add accent colors to the sprites, which is easier than coming up with similar but unique doors and switches:
		# X	one for each channel of signals, red is for traps
		# X	gold for gold
	
# 	release
	# X	design a fun-enough map!
	# X	convert map to code
	# X	update readme
	#	a simple loading splash
