# X	set up project:
	# X	add boilerplate files
	# X	set up repository 
	# X	publish to Github along the way
	# X	create a gh-pages branch
	# X	make a post-commit hook to overwrite gh-pages with master

@ X	system:
	# X	write init function for Crafty
	# X	set-up a loading and a main scene with appropriate functioning
	# X	set-up global mouse events and states extension to Crafty
	# X	massive bug, components (at least move > tick) is sharing states across entities
		Lesson learned. If you're going to use objects for internal storage for components, CLONE THEM IN INIT FIRST!
	# X	dynamically pad the document to provide desirable-length scrolling.

@	player:
	# X	set up player entity with default components
	# X	add animated sprite, too
	# X	write custom components for movement:
		# X	a component that stores movement by units, a discrete beginning position, and a discrete end position, and a state for movement animation: move
		# X	extend that component to do the actual movement animation and also set states for movement, runs every frame
		# X	write a function to initiate directional movement so that angular movement is not possible
		# X	add an event for when movement is possible
		# X	make component out of test mouse-movement: ctrl_mouse
		# X	write a component that decides which direction the player has moved from scrolling: ctrl_scroll
	# X	wrap player entity in a nice closure
	# X	implement collisions:
		# X	add collision component and a smaller-than-unit hitbox
		# X	make collision with solid tiles reset movement
	#	implement stats:
		#	write hp component
		#	make hook for unit-unit collisions for damage and stuff
		
@	map:
	# X	design format to store map data:
		a base raster layer for terrain: walls, and floors, etc
		an additional layer for doors, traps, switches, treasures, and enemies; implemented as a textual list with co-ordinates
	# X	set-up map-tiles assemblage
	#	make a test map:
		#	settle on a palette
		#	create the raster base layer
		#	make list of map-entities
	#	make assemblage that creates cell entities from data
	# X	make sure z-values are correct
	@	staging:
		#	rescale the stage based on map size
		#	add necessary margins to canvas automatically
	@ 	visibility:
		# X	hide all tiles upon generation
		#	implement eye component that reveals hidden tiles by proximity

@ X	artwork:
	# X	copy over Oryx' spritesheets
	# X	edit as necessary
	# X	split animation statically
